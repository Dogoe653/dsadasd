-- Define a function to highlight all players
local function highlightPlayers()
    local players = game:GetService("Players")
    for _, player in ipairs(players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            -- Example of highlighting by changing character's color
            local humanoid = character.Humanoid
            if not humanoid:FindFirstChild("Highlight") then
                local highlight = Instance.new("Highlight")
                highlight.Name = "Highlight"
                highlight.Adornee = character
                highlight.Parent = humanoid
                highlight.FillColor = Color3.fromRGB(255, 0, 0)  -- Red color for highlight
            end
        end
    end
end

-- Define a function to set up the refresh interval
local function setupRefreshInterval()
    while true do
        highlightPlayers()
        wait(1)  -- Wait for 1 second before running again
    end
end

-- Start the refresh interval
setupRefreshInterval()


-- LocalScript placed in StarterGui

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local Player = Players.LocalPlayer

-- Variables
local fovRadius = 100 -- Radius of the FOV circle
local screenGui, fovCircle

-- Function to setup the FOV circle
local function setupFOVCircle()
    screenGui = Instance.new("ScreenGui", Player:WaitForChild("PlayerGui"))
    fovCircle = Instance.new("Frame", screenGui)

    fovCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
    fovCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fovCircle.BackgroundTransparency = 0.5
    fovCircle.BorderSizePixel = 0
    fovCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    fovCircle.Position = UDim2.new(0.5, 0, 0.5, 0) -- Center of the screen
    fovCircle.ZIndex = 10

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = fovCircle
end

-- Function to check if a target's head is within the FOV
local function isInFOV(head)
    local screenPosition = Camera:WorldToScreenPoint(head.Position)
    local centerX = fovCircle.AbsolutePosition.X + fovRadius
    local centerY = fovCircle.AbsolutePosition.Y + fovRadius
    local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(centerX, centerY)).Magnitude
    return distance <= fovRadius
end

-- Function to aim and shoot at the target's head
local function aimAndShoot(target)
    local head = target:FindFirstChild("Head")
    if head and isInFOV(head) then
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position) -- Aim at the head
        fireAtPosition(head.Position)
    end
end

-- Function to simulate shooting
local function fireAtPosition(position)
    local ray = Ray.new(Camera.CFrame.Position, (position - Camera.CFrame.Position).unit * 1000)
    local hitPart, hitPosition = workspace:FindPartOnRay(ray, Player.Character)

    if hitPart and hitPart.Parent:FindFirstChild("Head") then
        print("Hit the target's head!")
        -- Implement damage logic here
    else
        print("Missed!")
    end
end

-- Function to handle player shooting
local function onPlayerShoot()
    local targets = {} -- Populate this with actual targets, e.g., from the workspace or other sources

    -- Find targets in the workspace
    for _, object in ipairs(workspace:GetChildren()) do
        if object:IsA("Model") and object:FindFirstChild("Humanoid") and object ~= Player.Character then
            table.insert(targets, object)
        end
    end

    -- Check each target
    for _, target in ipairs(targets) do
        aimAndShoot(target)
    end
end

-- Detect left mouse button click
local function setupShootingDetection()
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            onPlayerShoot()
        end
    end)
end

-- Function to handle respawn
local function onCharacterAdded(character)
    character:WaitForChild("Humanoid").Died:Connect(function()
        -- The script will disable itself upon death, we need to re-enable and reset the script when respawned
        script.Disabled = true
        script.Disabled = false
    end)

    setupFOVCircle()
    setupShootingDetection()
end

-- Initialize the script when the character is added (spawned)
Player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize the script for the current character (if already spawned)
if Player.Character then
    onCharacterAdded(Player.Character)
end

-- settings
local settings = {
    defaultcolor = Color3.fromRGB(255, 0, 0),
    teamcheck = false,
    teamcolor = true,
};

-- services
local runService = game:GetService("RunService");
local players = game:GetService("Players");

-- variables
local localPlayer = players.LocalPlayer;
local camera = workspace.CurrentCamera;

-- functions
local newVector2, newColor3, newDrawing = Vector2.new, Color3.new, Drawing.new;
local tan, rad = math.tan, math.rad;
local round = function(...) local a = {}; for i,v in next, table.pack(...) do a[i] = math.round(v); end return unpack(a); end;
local wtvp = function(...) local a, b = camera.WorldToViewportPoint(camera, ...) return newVector2(a.X, a.Y), b, a.Z end;

local espCache = {};

local function createEsp(player)
    local drawings = {};

    drawings.box = newDrawing("Square");
    drawings.box.Thickness = 1;
    drawings.box.Filled = false;
    drawings.box.Color = settings.defaultcolor;
    drawings.box.Visible = false;
    drawings.box.ZIndex = 2;

    espCache[player] = drawings;
end

local function removeEsp(player)
    if rawget(espCache, player) then
        for _, drawing in next, espCache[player] do
            drawing:Remove();
        end
        espCache[player] = nil;
    end
end

local function updateEsp(player, esp)
    local character = player and player.Character;
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart");
        if humanoidRootPart then
            local position, visible, depth = wtvp(humanoidRootPart.Position);
            esp.box.Visible = visible;

            if visible then
                local scaleFactor = 1 / (depth * tan(rad(camera.FieldOfView / 2)) * 2) * 1000;
                local width, height = round(3.5 * scaleFactor,7.5 * scaleFactor);
                local x, y = round(position.X, position.Y);

                esp.box.Size = newVector2(width, height);
                esp.box.Position = newVector2(round(x - width / 2, y - height / 2));
                esp.box.Color = settings.teamcolor and player.TeamColor.Color or settings.defaultcolor;
            end
        else
            esp.box.Visible = false;
        end
    else
        esp.box.Visible = false;
    end
end

-- Initialize ESP for existing players
for _, player in next, players:GetPlayers() do
    if player ~= localPlayer then
        createEsp(player);
    end
end

-- Handle player added
players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        createEsp(player);
    end
end)

-- Handle player removed
players.PlayerRemoving:Connect(function(player)
    removeEsp(player);
end)

-- Optimize rendering by updating every frame
runService.RenderStepped:Connect(function()
    for player, drawings in next, espCache do
        if settings.teamcheck and player.Team == localPlayer.Team then
            continue;
        end

        if drawings and player ~= localPlayer then
            updateEsp(player, drawings);
        end
    end
end)
